{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Arial-BoldMT;\f1\fswiss\fcharset0 ArialMT;\f2\fswiss\fcharset0 Arial-ItalicMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red0\green0\blue0;\red255\green255\blue255;
\red0\green0\blue0;\red202\green214\blue225;\red52\green52\blue52;\red0\green0\blue0;\red9\green9\blue9;
\red121\green121\blue121;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;\cssrgb\c0\c0\c0\c84314;\cssrgb\c100000\c100000\c100000;
\cssrgb\c0\c0\c0;\cssrgb\c83137\c87059\c90588\c24706;\cssrgb\c26667\c26667\c26667;\cssrgb\c0\c0\c0\c4706;\csgenericrgb\c3529\c3529\c3529;
\csgenericrgb\c47451\c47451\c47451;\cssrgb\c0\c0\c0\c68235;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww33400\viewh18300\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \ulc0 Architecture
\f1\b0 \ulnone \
\
https://www.thetombomb.com/2019/11/13/app-module-vs-core-module-vs-shared-module-vs-feature-modules-in-angular/#:~:text=The%20Core%20Module%20is%20where,that%20it%20is%20provided%20in.\
\
https://medium.com/@joao.aguas/angular-core-and-shared-modules-efe072bc9645\
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \
https://medium.com/olegburlaka/modular-architecture-of-spa-on-angular-8-and-gitsubmodule-as-first-step-to-micro-frontend-bc2b06b77d2e\
\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://medium.com/@tomastrajan/6-best-practices-pro-tips-for-angular-cli-better-developer-experience-7b328bc9db81"}}{\fldrslt \cf2 https://medium.com/@tomastrajan/6-best-practices-pro-tips-for-angular-cli-better-developer-experience-7b328bc9db81}}\
\
\
\pard\pardeftab720\sl480\partightenfactor0
\cf3 \cb4 \ulnone A good guideline to follow is to split our application into at least three different modules\uc0\u8202 \'97\u8202 Core, Shared and Feature:\
\
\pard\pardeftab720\sl620\partightenfactor0

\f0\b\fs48 \cf3 CoreModule
\f1\b0\fs36 \
\pard\pardeftab720\sa320\partightenfactor0
\cf5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 The\'a0\cb6 Core\cb4 \'a0submodule contains all app-level components and singleton services.\'a0It is the\'a0'starting point'\'a0of the application!\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Examples of app-level components are the: TabGroupComponent or a RoutingModule.\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Examples of singleton services are: the TabService, Logging Service, AuthService and HttpClientModule.\cb1 \
\pard\pardeftab720\sl518\sa320\partightenfactor0

\f0\b \cf5 \cb4 Restrictions:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f1\b0 \cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 This Core submodule\'a0\cb6 must\cb4 \'a0be imported once in the root AppModule!\cb1 \
\ls2\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 This Core submodule\'a0\cb6 may not\cb4 \'a0be imported into other modules!\cb1 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl480\partightenfactor0
\cf3 \
\pard\pardeftab720\sl620\partightenfactor0

\f0\b\fs48 \cf3 SharedModule
\fs36 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf3 All the 
\f0\b \'93dumb\'94 components and pipes
\f1\b0  should be implemented here. \
These components don\'92t import and inject services from core or other features in their constructors.\
\
They should receive all data though attributes in the template of the component using them. \
This all sums up to the fact that\'a0\cb8 SharedModule\cb4 \'a0doesn\'92t have any dependency to the rest of our application.\

\f0\b \cf5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b0 \cf5 The\'a0\cb6 Shared\cb4 \'a0submodule contains directives,\'a0pipes,\'a0components and other modules that are shared throughout the application.\'a0The\'a0\cb6 CommonModule\cb4 \'a0of Angular is also an example of\'a0this and provides,\'a0among other things,\'a0the directives:\'a0\cb6 ngIf\cb4 \'a0and\'a0\cb6 ngFor\cb4 !\'a0Another example of a shared component is the\'a0\cb6 Material Module\cb4 .\
What would you not put in the Shared submodule?\'a0You should\'a0\cb6 not\cb4 \'a0put\'a0\cb6 services\cb4 \'a0in a shared module which may be imported by a lazy loaded module.\'a0When a lazy loaded module\'a0imports a module which provide a service,\'a0angular will create another instance of this service which may result in unexpected behaviors.\'a0Also do not put services which are statefull in the Shared submodule.\
HttpClientModule should\'a0\cb6 NOT\cb4 \'a0be defined in the SharedModule,\'a0because it is a singleton service!\
\pard\pardeftab720\sl480\partightenfactor0
\cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl620\partightenfactor0

\f0\b\fs48 \cf3 FeatureModule
\fs36 \
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0 \cf3 We are going to create multiple feature modules for every independent feature of our application. \
Feature modules should import services from\'a0\cb8 SharedModule and CoreModule\cb4 . \
If feature module A needs to import service from feature module B, consider moving that service into core! (Example authentication service)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf9 \cb1 \kerning1\expnd0\expndtw0 The 
\f2\i \cf10 `Feature` 
\f1\i0 \cf9 submodule contains all components and modules with business functionality\
\pard\pardeftab720\sl480\partightenfactor0
\cf3 \cb4 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl880\partightenfactor0

\f2\i \cf11 Rule of thumb is to try to create features which don\'92t depend on any other features\
 1  just on services provided by CoreModule\
 2 and components provided by SharedModule.\
\
\pard\pardeftab720\sl620\partightenfactor0

\f0\i0\b\fs48 \cf3 LazyLoading
\fs36 \
\pard\pardeftab720\sl660\partightenfactor0

\f1\b0 \cf3 We should lazy load our feature modules whenever possible.\
\pard\pardeftab720\sl880\partightenfactor0

\f2\i \cf11 \
\pard\pardeftab720\sl780\partightenfactor0

\f0\i0\b\fs48 \cf3 Aliases for app and environments\
\pard\pardeftab720\sl480\partightenfactor0

\f1\b0\fs36 \cf3 Aliasing our app and environments folders will enable us to implement clean 
\f0\b imports
\f1\b0  which will be consistent throughout our application.
\f2\i \cf11 \
}